{"hierarchy":{"paths":[["doc:\/\/dev.alexanderweiss.swiftui_theming\/documentation\/Overview"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/dev.alexanderweiss.swiftui_theming\/documentation\/swiftui-theming\/GettingStarted","interfaceLanguage":"swift"},"metadata":{"title":"Getting Started","roleHeading":"Article","role":"article"},"sections":[],"kind":"article","abstract":[{"text":"Learn how to integrate SwiftUI Theming into your project.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Adding swiftui-theming as a dependency","anchor":"Adding-swiftui-theming-as-a-dependency","level":2},{"type":"codeListing","syntax":"swift","code":["let package = Package(","  dependencies: [","    .package(","      url: \"https:\/\/github.com\/alexanderwe\/swiftui-theming\",","      from: \"0.1.1\"","    ),","  ],","  targets: [","    .target(","      name: \"<target-name>\",","      dependencies: [","        .product(","          name: \"Theming\",","          package: \"swiftui-theming\"","        )","      ]","    )","  ]",")"]},{"text":"Create your first theme","anchor":"Create-your-first-theme","level":2,"type":"heading"},{"style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"Be sure to checkout "},{"isActive":true,"type":"reference","identifier":"doc:\/\/dev.alexanderweiss.swiftui_theming\/tutorials\/MeetSwiftUITheming"},{"text":" for an interactive tutorial.","type":"text"}],"type":"paragraph"}],"type":"aside"},{"type":"heading","anchor":"Step-1-Define-Color-Styles","level":3,"text":"Step 1: Define Color Styles"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before creating a new theme, define the color styles available in your app:"}]},{"code":["import Theming","","extension ThemeColorStyle {","    \/\/\/ A style for primary labels","    static let primaryLabel: Self = Self(name: \"primaryLabel\")","    \/\/ Define additional styles as needed","}"],"syntax":"swift","type":"codeListing"},{"text":"Step 2: Create a Theme","anchor":"Step-2-Create-a-Theme","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"With color styles defined, implement a method to create a theme. Each theme requires to at least have a name and a color mapping. Depending on your needs you may need different mappings on different platforms since not all color "},{"identifier":"doc:\/\/dev.alexanderweiss.swiftui_theming\/documentation\/Theming\/ThemeColor","type":"reference","isActive":true},{"text":" variants are available on all platforms.","type":"text"}]},{"code":["import Theming","\/\/ MARK: - Available Themes","extension Theme {","    static let `default`: Theme = .createDefaultTheme()","}","","\/\/ MARK: - Theme Creation","extension Theme {","    private static func createDefaultTheme() -> Theme {","        let colors: Theme.ColorMap = [","            .primaryLabel: ThemeColor(lightColor: .primary, darkColor: .primary)","        ]","        return Theme(name: \"Default\", colors: colors)","    }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"anchor":"Make-App-themeable","type":"heading","text":"Make App themeable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To enable theming in your app, inject a "},{"code":"ThemeManager","type":"codeVoice"},{"text":" instance into your appâ€™s scenes.","type":"text"}]},{"anchor":"Step-1-Initialize-ThemeManager","level":3,"text":"Step 1: Initialize `ThemeManager`","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Declare a ","type":"text"},{"type":"codeVoice","code":"@State"},{"text":" property to hold the ","type":"text"},{"code":"ThemeManager","type":"codeVoice"},{"type":"text","text":" in your app definition:"}]},{"code":["import SwiftUI","import Theming","","@main","struct MyApp: App {","    @State var myThemeManager: ThemeManager = ThemeManager(initialTheme: .default)","","    var body: some Scene {","        WindowGroup {","            ContentView()","        }","        .withThemeManager(themeManager: myThemeManager)","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Step 2: Access Theme Colors in Views","type":"heading","level":3,"anchor":"Step-2-Access-Theme-Colors-in-Views"},{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":".themeColor"},{"text":" method to apply theme colors in your SwiftUI views:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct ContentView: View {","    var body: some View {","        Text(\"Hello World\")","            .foregroundStyle(.themeColor(for: .primaryLabel))","    }","}"]}]}],"references":{"doc://dev.alexanderweiss.swiftui_theming/documentation/Overview":{"kind":"article","identifier":"doc:\/\/dev.alexanderweiss.swiftui_theming\/documentation\/Overview","type":"topic","abstract":[],"url":"\/documentation\/overview","role":"collection","title":"SwiftUI Theming Documentation"},"doc://dev.alexanderweiss.swiftui_theming/tutorials/MeetSwiftUITheming":{"abstract":[{"type":"text","text":"SwiftUI Theming is a library that enables seamless theming in SwiftUI across all Apple platforms, including iOS, macOS, tvOS, watchOS, and visionOS."}],"identifier":"doc:\/\/dev.alexanderweiss.swiftui_theming\/tutorials\/MeetSwiftUITheming","kind":"overview","type":"topic","title":"Meet SwiftUI Theming","url":"\/tutorials\/meetswiftuitheming","role":"overview"},"doc://dev.alexanderweiss.swiftui_theming/documentation/Theming/ThemeColor":{"kind":"symbol","abstract":[{"type":"text","text":"A color representing all possible variations where this color is used."}],"title":"ThemeColor","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ThemeColor","kind":"identifier"}],"url":"\/documentation\/theming\/themecolor","navigatorTitle":[{"text":"ThemeColor","kind":"identifier"}],"identifier":"doc:\/\/dev.alexanderweiss.swiftui_theming\/documentation\/Theming\/ThemeColor"}}}